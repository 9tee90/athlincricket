// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  isAdmin           Boolean   @default(false)
  password          String
  role              Role      @default(player)
  isVerifiedCoach   Boolean   @default(false)
  accounts          Account[]
  sessions          Session[]
  challengesCreated Challenge[]  @relation("CreatedChallenges")
  sponsoredChallenges Challenge[] @relation("SponsoredChallenges")
  sponsorships       Sponsorship[] @relation("SponsorRelation")
  sponsoredBy        Sponsorship[] @relation("XProRelation")
  submissions        Submission[]
  videos             Video[]
  invitedPlayers     User[]    @relation("PlayerInvites")
  coachedBy          User[]    @relation("PlayerInvites")
  coachId            String?
  courses            Course[]
  purchasedCourses   Course[]   @relation("PurchasedCourses")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  player
  xpro
  sponsor
  admin
  coach
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  category    ChallengeCategory
  videoUrl    String
  reward      String?
  deadline    DateTime
  creator     User     @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId   String
  sponsor     User?    @relation("SponsoredChallenges", fields: [sponsorId], references: [id])
  sponsorId   String?
  status      ChallengeStatus @default(active)
  createdAt   DateTime @default(now())

  submissions Submission[]
}

enum ChallengeCategory {
  technical
  fitness
  lifestyle
  mindset
  nutrition
}

enum ChallengeStatus {
  active
  closed
  archived
}

model Submission {
  id          String   @id @default(cuid())
  videoUrl    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  createdAt   DateTime @default(now())
  poseReviewed Boolean @default(false)
  poseFeedback String?
  feedbackHelpful Boolean?
  winner      Boolean  @default(false)
}

model Sponsorship {
  id         String   @id @default(cuid())
  sponsor    User     @relation("SponsorRelation", fields: [sponsorId], references: [id])
  sponsorId  String
  xPro       User     @relation("XProRelation", fields: [xProId], references: [id])
  xProId     String
  amount     Int
  status     SponsorshipStatus @default(pending)
  createdAt  DateTime @default(now())
}

enum SponsorshipStatus {
  pending
  accepted
  rejected
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  coach       User     @relation(fields: [coachId], references: [id])
  coachId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  coachId     String
  introUrl    String
  bannerUrl   String?
  lessons     Lesson[]
  buyers      User[]   @relation("PurchasedCourses")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coach       User     @relation(fields: [coachId], references: [id])

  @@index([coachId])
}

model Lesson {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  videoUrl  String
  notes     String?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}
