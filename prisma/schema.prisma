// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        Role
  bio         String?
  profileImage String?
  createdAt   DateTime @default(now())

  challengesCreated Challenge[]  @relation("CreatedChallenges")
  sponsoredChallenges Challenge[] @relation("SponsoredChallenges")
  sponsorships      Sponsorship[] @relation("SponsorRelation")
  sponsoredBy      Sponsorship[] @relation("XProRelation")
  submissions       Submission[]
}

enum Role {
  player
  xpro
  sponsor
  admin
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  category    ChallengeCategory
  videoUrl    String
  reward      String?
  deadline    DateTime
  creator     User     @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId   String
  sponsor     User?    @relation("SponsoredChallenges", fields: [sponsorId], references: [id])
  sponsorId   String?
  status      ChallengeStatus @default(active)
  createdAt   DateTime @default(now())

  submissions Submission[]
}

enum ChallengeCategory {
  technical
  fitness
  lifestyle
  mindset
  nutrition
}

enum ChallengeStatus {
  active
  closed
  archived
}

model Submission {
  id          String   @id @default(cuid())
  videoUrl    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  createdAt   DateTime @default(now())
  poseReviewed Boolean @default(false)
  poseFeedback String?
  feedbackHelpful Boolean?
  winner      Boolean  @default(false)
}

model Sponsorship {
  id         String   @id @default(cuid())
  sponsor    User     @relation("SponsorRelation", fields: [sponsorId], references: [id])
  sponsorId  String
  xPro       User     @relation("XProRelation", fields: [xProId], references: [id])
  xProId     String
  amount     Int
  status     SponsorshipStatus @default(pending)
  createdAt  DateTime @default(now())
}

enum SponsorshipStatus {
  pending
  accepted
  rejected
}
